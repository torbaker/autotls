/*-
 * #%L
 * autotls
 * %%
 * Copyright (C) 2024 Tim Orbaker
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */
package com.orbaker.autotls;

import com.orbaker.autotls.impl.CertificateAuthorityBuilderImpl;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import java.io.File;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.KeyStore.ProtectionParameter;
import java.security.cert.Certificate;
import java.util.List;
import java.util.SequencedCollection;
import javax.naming.NamingException;
import javax.naming.ldap.Rdn;
import javax.security.auth.x500.X500Principal;
import org.slf4j.Logger;

/**
 * Certificate authority and base configuration shared by all
 * authority instances.
 *
 * @author torbaker
 */
public interface CertificateAuthority
{
    /**
     * Policy for requesting wildcard certificates.
     */
    static enum WildcardPolicy
    {
        /**
         * Never request wildcard certificates.
         */
        NEVER,

        /**
         * Avoid wildcard certificates where possible. Wildcards
         * will only be requested with the number of host names
         * for a domain exceeds the maximum alternate names for
         * a certificate.
         */
        AVOID,

        /**
         * Prefer wildcard certificates. Wildcards will be requested
         * any time the number of host names in a domain exceed one.
         */
        PREFER,

        /**
         * Always request wildcard certificates.
         */
        ALWAYS;
    }

    /**
     * The relative names that are used along with the primary host name (CN)
     * in order to construct a full distinguished name for the subject of the
     * signing requests for this authority instance.
     *
     * If there are no defined relative names, this returns an empty list.
     *
     * @return
     *      A list of defined relative names. This list is unmodifiable.
     */
    @NotNull List<Rdn> relativeName();

    /**
     * Get the wildcard policy to use when dividing the requested host names
     * into certificates.
     *
     * @return
     *      The configured wildcard policy. Never {@code null}.
     */
    @NotNull WildcardPolicy wildcardPolicy();

    /**
     * Get the configured maximum alternate names per certificate request.
     * Note that the certificate request may include one more than this number
     * if {@link #includeDomainAsAltName()} is {@code true}.
     *
     * This value will be {@code >= 1}.
     *
     * @return
     *      The maximum SAN entries per certificate.
     */
    @Positive int maxAltNamesPerCert();

    /**
     * Get the signature algorithm used to sign certificate requests.
     *
     * @return
     *      The certificate signing algorithm. Never {@code null}.
     */
    @NotBlank String signatureAlgorithm();

    /**
     * {@code true} if CSRs generated by this authority instance should
     * be saved.
     *
     * @return
     *      Whether or not CSRs are saved.
     */
    boolean saveCsr();

    /**
     * The path in which to save CSRs, if {@link #saveCsr()} is {@code true}.
     *
     * If CSRs are not saved, any value here will be ignored.
     *
     * @return
     *      The path in which to save the CSRs if {@link saveCsr()} is true.
     *      This may be {@code null} if saving is disabled. If saving is enabled,
     *      this must not return {@code null}.
     */
    Path csrPath();

    /**
     * If {@code true}, include the domain name as a SAN in the certificate
     * request. This name may be added in excess of the configured maximum
     * SANs per certificate.
     *
     * @return
     *      Add domain name to CSR as a SAN if true.
     */
    boolean includeDomainAsAltName();

    /**
     * Return a displayable identifier that identifies this identifier.
     *
     * @return
     *      Displayable identifier. Never {@code null} or empty.
     */
    @NotBlank
    String identifier();

    /**
     * A provider can optionally claim a certificate as it's own. This
     * is used when renewing certificates to attempt to direct a renewal
     * request to its initial issuer. This is not required to be implemented,
     * but if it is not implemented and returns {@code false}, then renewals
     * are effectively disabled for the instance.
     *
     * @param chain
     *      Certificate chain that {@code CertificateManager} wishes to match
     *      to an authority.
     *
     * @return
     *      {@code true} if the authority instance recognizes that it issued
     *      the certificate and is willing to claim it for renewals.
     */
    boolean claimCertificate( @NotEmpty Certificate[] chain );

    /**
     * Acquire one or more certificates that provide coverage for {@code names}.
     *
     * While it is supported for an authority to return multiple certificates in
     * response to this call. It SHOULD not do so.
     *
     * @param logger
     *      Logger for messages from this authority.
     *
     * @param keyPair
     *      Key pair to use in the certificate.
     *
     * @param names
     *      Names to use in the certificate. The certificate will use the first
     *      item in this collection as the 'CN' and the rest as subject alt names.
     *      This list must not be empty.
     *
     * @param alias
     *      The alias to use in resultant keystore. If multiple certificates are
     *      generated here, then '-0', '-1', ... are added to this name for subsequent
     *      certificates.
     *
     * @param keyPass
     *      The key protection parameter for the key(s) in the resultant keystore.
     *
     * @return
     *      A keystore containing one or more certificates that provide coverage for
     *      all of the {@code names}.
     *
     * @throws GeneralSecurityException
     *      On error.
     */
    KeyStore acquireCoverage( @NotNull Logger logger, @NotNull KeyPair keyPair, @NotEmpty SequencedCollection<String> names, @NotBlank String alias, @NotNull ProtectionParameter keyPass ) throws GeneralSecurityException;

    /**
     * Create a new authority builder.
     *
     * @return
     *      New empty builder. Never {@code null}.
     */
    @NotNull
    static CertificateAuthority.Builder builder()
    {
        return new CertificateAuthorityBuilderImpl();
    }

    /**
     * Create a new builder by copying from the provided builder.
     *
     * @param copyFrom
     *      The builder to copy.
     *
     * @return
     *      New copy of {@code copyFrom}. Never {@code null}.
     */
    @NotNull
    static CertificateAuthority.Builder builder( CertificateAuthority.Builder copyFrom )
    {
        return new CertificateAuthorityBuilderImpl( copyFrom );
    }

    /**
     * Builder for {@code CertificateAuthority} instances.
     *
     * In order for a builder instance to be valid, it must adhere to the
     * following:
     * <ul>
     * <li>If {@link #setSaveCsr(boolean)} is {@code true}, then {@link #getCsrPath()}
     *      must not be {@code null}.</li>
     * <li>{@link #getMaxAltNamesPerCert()} must be at least 1.</li>
     * <li>{@link #getSignatureAlgorithm()} must not be {@code null} or blank.</li>
     * <li>{@link #getWildcardPolicy()} must not be null.
     * </ul>
     *
     * <em>
     * Note about {@link #setIncludeDomainAsAltName(boolean)} and
     * {@link #setMaxAltNamesPerCert(int)}:
     * </em>
     *
     * The maximum number of SANs is determined before the addition of the domain
     * name to the list. This means that enabling the inclusion of the domain name
     * may result in one more alt name than the configured limit in the certificate
     * requests.
     */
    interface Builder
    {
        /**
         * Current relative names as an RFC2253 string. If there
         * are no names configured yet, this will return an empty
         * string.
         *
         * @return
         *      Relative names for subject DN construction. Never {@code null}.
         */
        @NotNull
        String getRelativeName();

        /**
         * Current relative names as a list of {@link javax.naming.ldap.Rdn}
         * values. If none have been configured yet, return an empty list.
         *
         * @return
         *      Unmodifiable list of currently configured relative names.
         *      Never {@code null}.
         */
        @NotNull
        List<Rdn> getRelativeNames();

        /**
         * The currently configured wildcard policy.
         *
         * @return
         *      Current wildcard policy, may be {@code null}.
         */
        WildcardPolicy getWildcardPolicy();

        /**
         * Currently configured maximum alt names per certificate.
         *
         * @return
         *      Current max alt names per cert.
         */
        int getMaxAltNamesPerCert();

        /**
         * Currently configured signature algorithm.
         *
         * @return
         *      Current signature algorithm.
         */
        String getSignatureAlgorithm();

        /**
         * {@code true} if CSRs should be saved.
         *
         * @return
         *      If CSRs should be saved.
         */
        boolean isSaveCsr();

        /**
         * Current CSR save path.
         *
         * @return
         *      Current CSR save path.
         */
        Path getCsrPath();

        /**
         * {@code true} if domain names should be added to requests
         * as SANs.
         *
         * @return
         *      If domain names should be added as SANs.
         */
        boolean isIncludeDomainAsAltName();

        /**
         * Set the relative name(s) from an RFC2253 encoded string. This
         * may set one or multiple terms.
         *
         * @param rfc2253
         *      RFC-2253 encoded relative name.
         *
         * @return
         *      Chainable builder, never {@code null}.
         *
         * @throws NamingException
         *      If the string is not in RFC-2253 format, or if any
         *      term within the string is not permitted within an X.500
         *      distinguished name (we allow: OU, O, L, ST, and C).
         */
        @NotNull
        Builder setRelativeName( @NotBlank String rfc2253 ) throws NamingException;

        /**
         * Set one or more portions of the relative name from the
         * given {@link javax.security.auth.x500.X500Principal}.
         *
         * @param x500
         *      X500 principal.
         *
         * @return
         *      Chainable builder, never {@code null}.
         *
         * @throws NamingException
         *      if any term within {@code x500} is not permitted within an X.500
         *      distinguished name (we allow: OU, O, L, ST, and C).
         */
        @NotNull
        Builder setRelativeName( @NotBlank X500Principal x500 ) throws NamingException;

        /**
         * Set one portions of the relative name from the given
         * {@link javax.naming.ldap.Rdn}.
         *
         * @param relativeName
         *      Relative name to set
         *
         * @return
         *      Chainable builder, never {@code null}.
         *
         * @throws NamingException
         *      if the type of the {@code relativeName} is not permitted within an X.500
         *      distinguished name (we allow: OU, O, L, ST, and C).
         */
        @NotNull
        Builder setRelativeName( @NotNull Rdn relativeName ) throws NamingException;

        /**
         * Set one portions of the relative name from the given
         * {@code type} and {@code value}. This is syntactic sugar for:
         *
         * {@code setRelativeName( new Rdn( type, value ) );}
         *
         * @param type
         *      Type fo the relative name to set
         *
         * @param value
         *      Relative name to set
         *
         * @return
         *      Chainable builder, never {@code null}.
         *
         * @throws NamingException
         *      if {@code type} is not permitted within an X.500
         *      distinguished name (we allow: OU, O, L, ST, and C).
         */
        @NotNull
        Builder setRelativeName( @NotBlank String type, @NotBlank String value ) throws NamingException;

        /**
         * Set the relative name(s) from a list of relative names.
         *
         * @param relativeNames
         *      List of relative names.
         *
         * @return
         *      Chainable builder, never {@code null}.
         *
         * @throws NamingException
         *      If the string is not in RFC-2253 format, or if any
         *      term within the string is not permitted within an X.500
         *      distinguished name (we allow: OU, O, L, ST, and C).
         */
        @NotNull
        Builder setRelativeNames( @NotEmpty List<Rdn> relativeNames ) throws NamingException;

        /**
         * Set the wildcard policy.
         *
         * @param wildcardPolicy
         *      Wildcard policy. Never {@code null}.
         *
         * @return
         *      Chainable builder, never {@code null}.
         */
        @NotNull
        Builder setWildcardPolicy( @NotNull WildcardPolicy wildcardPolicy );

        /**
         * Set the maximum SANs per certificate request. See
         * {@link com.orbaker.autotls.CertificateAuthority.Builder} for a note on this value.
         *
         * @param maxAltNames
         *      Maximum names per certificate request.
         *
         * @return
         *      Chainable builder, never {@code null}.
         */
        @NotNull
        Builder setMaxAltNamesPerCert( @Positive int maxAltNames );

        /**
         * Set the signature algorithm used to sign CSRs.
         *
         * @param signatureAlgorithm
         *      Signature algorithm.
         *
         * @return
         *      Chainable builder, never {@code null}.
         */
        @NotNull
        Builder setSignatureAlgorithm( @NotBlank String signatureAlgorithm );

        /**
         * Enable/disable saving of CSRs
         *
         * @param saveCsr
         *      enable/disable saving.
         *
         * @return
         *      Chainable builder, never {@code null}
         */
        @NotNull
        Builder setSaveCsr( boolean saveCsr );

        /**
         * Set the path for saving CSRs.
         *
         * @param csrPath
         *      The CSR path
         *
         * @return
         *      Chainable builder, never {@code null}.
         *
         * @throws InvalidPathException
         *      If {@code csrPath} cannot be converted to a {@code Path}.
         */
        @NotNull
        Builder setCsrPath( @NotBlank String csrPath ) throws InvalidPathException;

        /**
         * Set the path for saving CSRs.
         *
         * @param csrPath
         *      The CSR path
         *
         * @return
         *      Chainable builder, never {@code null}.
         *
         * @throws InvalidPathException
         *      If {@code csrPath} cannot be converted to a {@code Path}.
         */
        @NotNull
        Builder setCsrPath( @NotNull File csrPath ) throws InvalidPathException;

        /**
         * Set the path for saving CSRs.
         *
         * @param csrPath
         *      The CSR path
         *
         * @return
         *      Chainable builder, never {@code null}.
         */
        @NotNull
        Builder setCsrPath( @NotNull Path csrPath );

        /**
         * Enable/disable inclusion of domain name as a SAN in certificate
         * generation. See {@link com.orbaker.autotls.CertificateAuthority.Builder}
         * for a note about how this affects the maximum names in a certificate.
         *
         * @param includeDomainName
         *      enable/disable inclusion of domain name.
         *
         * @return
         *      Chainable builder, never {@code null}.
         */
        @NotNull
        Builder setIncludeDomainAsAltName( boolean includeDomainName );
    }
}
